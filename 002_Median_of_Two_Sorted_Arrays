import java.lang.Math;

public class Solution {

    private boolean oddarray(int[] A){
        //whether the array size is odd
        if(A.length%2==0) return false;
        return true;
    }
    
    private double findMedian(int[] A){
        //return the Median of a array
        if(oddarray(A)) return (double)A[A.length/2];
        else return (A[A.length/2-1]+A[A.length/2])/2.0;
    }
    
    private double oneArrayMedian(int[] A, int[] B){
        // return Median where A is of length 1
        if(B.length==1) return (A[0]+B[0])/2.0;
        if(oddarray(B)){
            // B is the odd size,return median of two numbers
            if(B[B.length/2]>A[0]) return (B[B.length/2]+Math.max(A[0],B[B.length/2-1]))/2.0;
            else return (B[B.length/2]+Math.min(A[0],B[B.length/2+1]))/2.0;
        }
        else {
            // return A[0] or B[B.length/2-1] or B[B.length/2]
            if(A[0]<B[B.length/2-1]) return (double)B[B.length/2-1];
            else if(A[0]> B[B.length/2]) return (double)B[B.length/2];
            else return (double)A[0];
        }
    }
    
    private int compareArrays(int[] A, int[] B){
        // decide which one to truncate from beginning, 1 to truncate B
        // return -1 means median of A is the median, return -2 means median of B is the median
        if(oddarray(A)||oddarray(B)){
            // the case that one is odd is simple
            if(findMedian(A)>findMedian(B)) return 1;
            else return 0;
        }
        
        else { // two even one, we need to take some time
            int A1=A[A.length/2-1];
            int A2=A[A.length/2];
            int B1=B[B.length/2-1];
            int B2=B[B.length/2];
            if (A1>=B1 && A2<=B2) return -1;
            if (B1>=A1 && B2<=A2) return -2;
            if (A1>=B1 && A2>=B2) return 1;
            return 0;
        }
    }
    
    private double myFindMedian(int A[],int B[]){
        // lengthA<=lengthB
        if(A.length==0) return findMedian(B); // the case that A is empty
        if(A.length==1) return oneArrayMedian(A,B);
        int result=compareArrays(A,B);
        if(result==-1) return findMedian(A);
        if(result==-2) return findMedian(B);
        if(result==1){
            //cut second half of A
            int[] newB= new int[B.length-A.length/2];
            int[] newA=new int[A.length-A.length/2];
            System.arraycopy(B, A.length/2, newB,0, newB.length);
            System.arraycopy(A,0,newA,0, newA.length);
            return myFindMedian(newA,newB);
        }
        else{
            int[] newB= new int[B.length-A.length/2];
            int[] newA=new int[A.length-A.length/2];
            System.arraycopy(B, 0, newB,0, newB.length);
            System.arraycopy(A,A.length/2,newA,0, newA.length);
            return myFindMedian(newA,newB);
        }
    }
    
    
    public double findMedianSortedArrays(int A[], int B[]) {
        if(A.length>B.length) return myFindMedian(B,A);
        else return myFindMedian(A,B);
    }
}
